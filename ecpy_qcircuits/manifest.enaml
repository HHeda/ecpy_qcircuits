# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by Qcircuits Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""The manifest contributing the extensions to the main application.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import os

import enaml
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from ecpy.app.api import AppStartup
from ecpy.tasks.api import Tasks, Task, Interface
from ecpy_pulses.pulses.api import Context, Contexts, Shape, Shapes
from ecpy.instruments.api import (Starter, Connection, Drivers, Driver,
                                  Settings)


enamldef QcircuitsManifest(PluginManifest):
    """The manifest declaring the extension points to the Ecpy.

    """
    id = 'ecpy_qcircuits'

    Extension:
        point = 'ecpy.instruments.drivers'
        Drivers:
            path = 'ecpy_qcircuits.instruments.drivers'
            architecture = 'Qcircuits'
            Drivers:
                path = 'visa'
                starter = 'ecpy_hqc_legacy.starter.visa'
                Drivers:
                    manufacturer = 'Tabor'
                    Driver:
                        driver = 'tabor_awg:TaborAWG'
                        model = 'WX1284C'
                        kind = 'AWG'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'},
                                       'VisaRaw': {}
                                       }
                Drivers:
                    manufacturer = 'Keysight'
                    Driver:
                        driver = 'keysight_ena:KeysightENA'
                        model = 'ENA'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }

            Drivers:
                path = 'dll'
                starter = 'ecpy_hqc_legacy.starter.dll'
                connections = {'LegacyDLLConnection': {}}
                Driver:
                    driver = 'alazar935x:Alazar935x'
                    manufacturer = 'AlazarTech'
                    model = 'ATS9350'

    Extension:
        id = 'ecpy_qcircuits.tasks'
        point = 'ecpy.tasks.declarations'
        Tasks:
            path = 'ecpy_qcircuits.tasks.tasks'
            Tasks:
                path = 'instr'
                group = 'instr'
                Task:
                    task = 'alazar_tasks:DemodAlazarTask'
                    view = 'views.alazar_views:DemodAlazarView'
                    instruments = ['ecpy_qcircuits.Qcircuits.Alazar935x']
                Task:
                    task = 'ena_tasks:ENASweepTask'
                    view = 'views.ena_views:ENASweepView'
                    instruments = ['ecpy_qcircuits.Qcircuits.KeysightENA']
                Task:
                    task = 'ena_tasks:ENAGetTracesTask'
                    view = 'views.ena_views:ENAGetTracesView'
                    instruments = ['ecpy_qcircuits.Qcircuits.KeysightENA']
                    
    Extension:
        id = 'contexts'
        point = 'ecpy.pulses.contexts'
        Contexts:
            path = 'ecpy_qcircuits.pulses.contexts'
            Context:
                context = 'awg_context:TaborAWGContext'
                view = 'views.awg_context_view:TaborAWGContextView'
                instruments = ['ecpy_qcircuits.Qcircuits.TaborAWG']
                
    Extension:
        id = 'shapes'
        point = 'ecpy.pulses.shapes'
        Shapes:
            path = 'ecpy_qcircuits.pulses.shapes'
            Shape:
                shape = 'gaussian_shape:GaussianShape'
                view = 'views.gaussian_shape_view:GaussianShapeView'
            Shape:
                shape = 'gaussian_shape:GaussianEdgeShape'
                view = 'views.gaussian_shape_view:GaussianEdgeShapeView'
            Shape:
                shape = 'arbitrary_shape:ArbitraryShape'
                view = 'views.arbitrary_shape_view:ArbitraryShapeView'
