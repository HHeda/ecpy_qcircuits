# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2017-2018 by exopyQcircuits Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""View Alazar related tasks.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from inspect import cleandoc
from textwrap import fill
from collections import OrderedDict


from enaml.core.api import Conditional, Include
from enaml.widgets.api import (FileDialog, PushButton, GroupBox, Label, Field, ObjectCombo, CheckBox,
                               Container, ComboBox)
from enaml.layout.api import grid, vbox, hbox, factory, align

from exopy.tasks.api import (EVALUATER_TOOLTIP,FORMATTER_TOOLTIP)
from exopy.utils.widgets.qt_completers import QtLineCompleter
from ...base_instr_view import InstrView
from exopy.utils.widgets.dict_editor import DictEditor
from exopy.utils.widgets.dict_list_editor import DictListEditor
from exopy_qcircuits.utils.widgets.dict_list_editor import DictListEditor4

#from atom.api import Enum




enamldef Signal_path(Container):
    
    attr model
    constraints = [hbox(k, v0,v1), k.width == v0.width/4,k.width == v1.width/4]
    padding = 1
    
    Label:k:
        text= model.key
    
    ObjectCombo: v0:
        items <<  ['Demodulator 1', 'Demodulator 2', 'Demodulator 3','Demodulator 4',
                   'Demodulator 5','Demodulator 6','Demodulator 7','Demodulator 8',]
        tool_tip = ('Demodulator from which the data will be take')
        selected := model.value0
                
    ObjectCombo: v1:
        items <<  ['r', 'x', 'y','theta','frequency',]
        tool_tip = ('data to record')
        selected := model.value1
#    QtLineCompleter: v:
#        text := model.value

enamldef modified_values(Container):
    """View to edit a key/value pair.

    """
    #: Reference to the key/value pair being edited       
    attr model
    constraints = [hbox(k, v0, v1), 2*k.width <= v0.width, k.width == v1.width]
    padding = 1

    QtLineCompleter: k:
        text := model.key
        entries_updater = model.task.list_accessible_database_entries
        tool_tip = ('Labels to change in the AWG txt file')
        
    QtLineCompleter: v0:
        text := model.value0
        entries_updater = model.task.list_accessible_database_entries
        tool_tip = ('Value to insert instead of the label')
        
    ObjectCombo: v1:
        items <<  ['none', 'ns','MHz','V','kHz','ns_to_clck','clock_samples','s', 'µs','mV','GHz']
        tool_tip = ('Unit of the item')
        selected := model.value1
        
        
def load_sequence(core,file, task):
    
    seqfile = None
    try:
        seqfile = open(file,"r")
    except FileNotFoundError as er:
         cmd = 'exopy.app.errors.signal'
         msg = 'Failed to load sequence {}'.format(file)
         core.invoke_command(cmd, dict(kind='error', message=msg))
         return
    if seqfile:
        sequence= seqfile.read()
        seqfile.close()
        index = [];
        i=0;
        for s in sequence : 
            if s=="_":
                index.append(i)
            i=i+1
        para = []
        for i in range(len(index)-1):
            if not " " in sequence[index[i]:index[i+1]+1] and not "*" in sequence[index[i]:index[i+1]+1] and not "=" in sequence[index[i]:index[i+1]+1] and not "," in sequence[index[i]:index[i+1]+1]:
                para.append(sequence[index[i]:index[i+1]+1])
        new = OrderedDict.fromkeys(para, '')
        for k in (e for e in task.modified_values if e in new):
            new[k] = task.modified_values[k]
        task.modified_values = new
    

enamldef parameter_to_set(Container):
    """View to edit aparameter/index/value list.

    """
    #: Reference to the parameter/index/value list being edited
    attr model

    constraints = [hbox(k, v0txt, v0, v1txt, v1, v2txt, v2, v3txt, v3),
                   k.width == v0txt.width,
                   k.width == v1txt.width,
                   k.width == v2txt.width,
                   k.width == v3txt.width,
                   k.width*2 == v0.width,
                   k.width*2 == v2.width,
                   k.width == v1.width,
                   
                   k.width == v3.width, 
                   align('v_center',k, v0txt, v0, v1txt, v1, v2txt, v2, v3txt, v3)
                   ]
    padding = 1
    Label: k:
        text = model.key
        
    Label: v0txt:
        text = 'Para :'
        
    ObjectCombo: v0:
        items <<  ['User Register', 'Oscillator', 'AWG Amplitude','Phase shift',
                   'LowPass order','LowPass TC','Osc of Demod','Trigger of Demod',
                   'Output1 Demod','Output2 Demod']
        selected := model.value0
        tool_tip =('Name of parameter. Ex Oscillator for oscillator 4')
        
    Label: v1txt:
        text = 'Index :'    
        
    Container:v1:
        Conditional:
            condition << (v0.selected == 'Phase shift' or 'LowPass' in v0.selected or 'Demod' in v0.selected)
            ObjectCombo:
                items <<  ['1','2','3','4','5','6','7','8']
                selected := model.value1
                #selected << model.key[-1]
                tool_tip =('Index of demodulator. Ex 4 for demodulator 4')
        Conditional:
            condition << (v0.selected == 'Oscillator')
            ObjectCombo:
                items <<  ['1','2','3','4','5','6','7','8']
                selected := model.value1
                #selected << model.key[-1]
                tool_tip =('Index of oscllator. Ex 4 for oscillator 4')
        Conditional:
            condition << (v0.selected ==  'AWG Amplitude' )
            ObjectCombo:
                items <<  ['1','2']
                selected := model.value1
                #selected << model.key[-1]
                tool_tip =('Index of AWG. Ex 1 for AWG output 1')
        Conditional:
            condition << (v0.selected == 'User Register' )
            ObjectCombo:
                items <<  ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16']
                selected := model.value1
                tool_tip =('Index of register. Ex 4 for User Register 4')
            
    Label: v2txt:
        text = 'Value :'
    Container:v2:
        Conditional:
            condition << ( v0.selected == 'LowPass order' ) 
            ObjectCombo:
                items << ['1','2','3','4','5','6','7','8']
                selected := model.value2
                tool_tip =('Order number')
        Conditional:
            condition << ( v0.selected == 'Osc of Demod' ) 
            ObjectCombo:
                items << ['1','2','3','4','5','6','7','8']
                selected := model.value2
                tool_tip =('Oscillator index')
        Conditional:
            condition << ('Trig' in  v0.selected) 
            ObjectCombo:
                items << ['AWG Trigger 1 Rise','AWG Trigger 1 High','AWG Trigger 2 Rise','AWG Trigger 2 High',
                          'AWG Trigger 3 Rise','AWG Trigger 3 High','AWG Trigger 4 Rise','AWG Trigger 4 High']
                selected:= model.value2
        Conditional:
            condition<<( v0.selected != 'Osc of Demod' and  v0.selected !='LowPass order' and not 'Trig' in  v0.selected)
            QtLineCompleter:
                text := model.value2
                entries_updater = model.task.list_accessible_database_entries
                tool_tip =('''Value of parameter. Ex 30e3 for a frequency of 30 kHz.
                           Oscillator's frequency musst be lower than 600 MHz.
                           Warning : User Register's value will be rounded down to the last integer.
                           AWH output take a number between 0 and 1 
                           ( min and max of the signal output scale).
                           Phase musst be in degree.
                           Output are in Volt''')        
    Label: v3txt:
        text = 'Unit :'
    ObjectCombo: v3:
        items <<  ['none', 'ns','MHz','V','kHz','ns_to_clck','clock_samples','s', 'µs','mV','GHz']
        tool_tip = ('Unit of the item')
        selected := model.value3
   

enamldef ScopeDemodUHFLIView(InstrView): view:

    constraints = [vbox(
                    grid([instr_label, traces, average, averaging,
                          samplingRate],
                         [instr_selection, traces_val,
                          average_val, averaging, samplingRate_val]),
                    hbox(acquisition,acquisition2),
                    customDemod),
                    averaging.width == traces_val.width,
                    acquisition.width == acquisition2.width
                    ]

    Label: traces:
        text = 'Number of traces'
    Field: traces_val:
        text := task.tracesnumber

    Label: average:
        text = 'Average'
    CheckBox: average_val:
        checked := task.average
        tool_tip = fill(cleandoc(
                            '''Can't take more than 30000 traces,
                            use a loop if you need more statistics.'''))
    Container: averaging:     
        Conditional:
            condition << average_val.checked
            Label:
                text = 'Number of points'
            Field:
                text := task.Npoints

    Label: samplingRate:
        text = 'sampling rate'
    ObjectCombo: samplingRate_val:
        items << list(task.get_member('samplingRate').items)
        selected := task.samplingRate

    GroupBox: acquisition:
        title = 'Channel 1 settings'
        
        constraints = [grid([delay, duration, freq,demod,trace],
                            [delay_val, duration_val, freq_val,demod_val,trace_val]),
                       freq_val.width == delay_val.width,
                       delay_val.width == duration_val.width,
                       demod_val.width==trace_val.width]
        Label: freq:
            text = 'Frequency (MHz)'
        QtLineCompleter: freq_val:
            text := task.freq
            entries_updater = task.list_accessible_database_entries
            tool_tip = fill(cleandoc(
                            '''give only one demodulation frequency'''))

        Label: delay:
            text = 'Delay (ns)'
        QtLineCompleter: delay_val:
            text := task.delay
            entries_updater = task.list_accessible_database_entries
            tool_tip = fill(cleandoc('''give the delay between the trigger and the beginning of the acquisition'''))

        Label: duration:
            text = 'Duration (ns)'
        QtLineCompleter: duration_val:
            text := task.duration
            entries_updater = task.list_accessible_database_entries
            tool_tip = fill(cleandoc(
                            '''duration of the acquisition. If the acquisition should be cut in different part,
                            give a list with the duration of each part (ex : [duration1,duration2,duration3])
                            the acquisition duration would be the sum of the list.'''))
        Label: demod:
            text = 'Demodulation'
        CheckBox: demod_val:
            checked := task.demod
            
        Label: trace:
            text = 'Trace'
        CheckBox: trace_val:
            checked := task.trace

    GroupBox: acquisition2:
        title = 'Channel 2 settings'
        
        constraints = [grid([delay2, duration2, freq2,demod2,trace2],
                            [delay2_val, duration2_val, freq2_val,demod2_val,trace2_val]),
                       freq2_val.width == delay2_val.width,
                       delay2_val.width == duration2_val.width,
                       demod2_val.width==trace2_val.width]
        Label: freq2:
            text = 'Frequency (MHz)'
        QtLineCompleter: freq2_val:
            text := task.freq2
            entries_updater = task.list_accessible_database_entries
            tool_tip = fill(cleandoc(
                            '''give only one demodulation frequency'''))

        Label: delay2:
            text = 'Delay (ns)'
        QtLineCompleter: delay2_val:
            text := task.delay2
            entries_updater = task.list_accessible_database_entries
            tool_tip = fill(cleandoc('''give the delay between the trigger and the beginning of the acquisition'''))

        Label: duration2:
            text = 'Duration (ns)'
        QtLineCompleter: duration2_val:
            text := task.duration2
            entries_updater = task.list_accessible_database_entries
            tool_tip = fill(cleandoc(
                            '''duration of the acquisition. If the acquisition should be cut in different part,
                            give a list with the duration of each part (ex : [duration1,duration2,duration3])
                            the acquisition duration would be the sum of the list.'''))
        Label: demod2:
            text = 'Demodulation'
        CheckBox: demod2_val:
            checked := task.demod2
            
        Label: trace2:
            text = 'Trace'
        CheckBox: trace2_val:
            checked := task.trace2
  
    
    GroupBox: customDemod:
        title = 'Custom Demodulation'

        
        Label: customDemodulation:
            text = 'Function used for the demodulation'
        QtLineCompleter: customDemod_val:
            text := task.customDemod
            entries_updater = task.list_accessible_database_entries
            tool_tip = fill(cleandoc('''list of 2 numpy array containing the two function that will be used for the demodulation
                                     instead of cosinus and sinus. The first one will replace
                                     cosinus, the second will replace sinus'''))

enamldef DemodUHFLIView(InstrView): view:
    
    constraints = [vbox(
                    grid([instr_label, numberOfAcquisition, average,averaging,power],
                         [instr_selection, nbOfAqu_val,average_val,averaging,power_val]
                          ),
                    para),
                    average.width == nbOfAqu_val.width,
                    average.width == averaging.width
                    ]

    Label: numberOfAcquisition:
        text = 'Acquisition number'
    QtLineCompleter: nbOfAqu_val:
        text := task.pointsnumber
        entries_updater = task.list_accessible_database_entries
    
    Label: average:
        text = 'Average'
    CheckBox: average_val:
        checked := task.average
        
    Container: averaging:     
        Conditional:
            condition << average_val.checked
            Label:
                text = 'Number of points'
            QtLineCompleter:
                text := task.Npoints
                entries_updater = task.list_accessible_database_entries
    Label: power:
        text = 'Measuring Power'
    CheckBox: power_val:
        checked := task.powerBool           

    GroupBox: para:
        title = 'Sequence parameters'
        constraints = [hbox(input1,input1_val,demod1,demod1_val,input2,input2_val,demod2,demod2_val,AWGcontrol,AWGcontrol_val),                      
                        input1.width/5 == input1_val.width,
                        input1.width == demod1.width,
                        input1.width == demod1_val.width,
                        input1.width == input2.width,
                        input1.width/5 == input2_val.width,
                        input1.width == demod2.width,
                        input1.width == demod2_val.width,
                        input1.width == AWGcontrol.width,
                        input1.width/5 == AWGcontrol_val.width
                       ]
        
        Label: input1:
            text = 'Record Input 1:'
        CheckBox: input1_val:
             checked := task.input1Bool  
            
        Label:demod1:
            text = 'Demodulator for input:1'
        ObjectCombo: demod1_val:
            items << list(task.get_member('input1demod').items)
            selected := task.input1demod
        
        Label: input2:
            text = 'Record Input 2:'
        CheckBox: input2_val:
             checked := task.input2Bool  
            
        Label:demod2:
            text = 'Demodulator for input2:'
        ObjectCombo: demod2_val:
            items << list(task.get_member('input2demod').items)
            selected := task.input2demod
            
        Label: AWGcontrol:
            text = 'Start AWG after demodulators:'
        CheckBox: AWGcontrol_val:
             checked := task.AWGcontrol 

enamldef PulseTransferUHFLIView(InstrView): view:
    
    
    constraints = [vbox(hbox(instr_label,instr_selection),
                        hbox(file_cont,modulation,Start), ed)]

    Container: file_cont:


        GroupBox: folder:

            title = 'Text File'
            constraints = [hbox(file, explore,seq_re),
                            align('v_center', file, explore,seq_re)]

            QtLineCompleter: file:
                text := task.PulseSeqFile
                tool_tip = fill(cleandoc('''text file containing the awg pulse sequence'''))
            PushButton: explore:
                text = 'Select Sequence'
                hug_width = 'strong'
                clicked ::
                    file = FileDialog(mode = 'open_file',
                                    title = 'Select a txt file',
                                    filters = ['*.txt']
                                    ).exec_()
                    if file:
                        task.PulseSeqFile = file
                        load_sequence(view.root.core,file, task)
            PushButton: seq_re:
                enabled << bool(task.PulseSeqFile)
                text = 'Refresh'
                clicked ::
                    load_sequence(view.root.core,file.text, task)

                        
    Container: modulation:

        GroupBox: Modulation:
            title = 'Modulation'
            constraints = [hbox(modulation_1,mod1_val,modulation_2,mod2_val)]

            Label: modulation_1:
                text = 'Advance Modulation AWG output 1 :'
            CheckBox: mod1_val:
                checked := task.mod1
            Label: modulation_2:
                text = 'Advance Modulation AWG output 2 :'
            CheckBox: mod2_val:
                checked := task.mod2
                
    Container: Start:

        GroupBox: start:
            title = 'AWG Run'
            constraints = [hbox(text ,bool_val)]

            Label: text:
                text = 'AWG auto-start'
            CheckBox: bool_val:
                checked := task.autoStart

    DictListEditor4(modified_values): ed:
        ed.mapping := task.modified_values
        ed.operations = ('add', 'move', 'remove')
        ed.attributes = {'task': task}
        
enamldef SetParametersUHFLIView(InstrView): view:
    
    
    constraints = [vbox(hbox(instr_label,instr_selection),ed)]


    DictListEditor4(parameter_to_set): ed:
        ed.mapping := task.parameterToSet
        ed.operations = ('add', 'move', 'remove')
        ed.attributes = {'task': task}
        
enamldef CloseAWGUHFLIView(InstrView): view:
    
    
    constraints = [hbox(instr_label,instr_selection)]


enamldef DAQDemodUHFLIView(InstrView): view:
    constraints = [vbox(
                    grid([instr_label, nbCol, nbRow,nbGrid,delay, average,repetition],
                         [instr_selection, nbCol_val, nbRow_val, nbGrid_val,delay_val, average_val, repetition]),
                         hbox(vbox(trigger,Control),SigDict)
                         ),
                    nbCol.width == nbRow.width,
                    nbCol.width == nbGrid.width,
                    nbCol.width == delay.width,
                    nbCol.width == repetition.width,
                    average.width == nbCol.width,
                    trigger.width == SigDict.width,
                    Control.width == SigDict.width
                    ]
                        
    Label: nbCol:
        text = 'Number of points'
    QtLineCompleter: nbCol_val:
        text := task.numberCol
        entries_updater = task.list_accessible_database_entries
        tool_tip = fill(cleandoc('''Asking more than 100 points can entails communication problem'''))

    Label: nbRow:
        text = 'Number of traces'
    QtLineCompleter: nbRow_val:
        text := task.numberRow
        entries_updater = task.list_accessible_database_entries

    Label: nbGrid:
        text = 'Number of Grids'
    QtLineCompleter: nbGrid_val:
        text := task.numberGrid
        entries_updater = task.list_accessible_database_entries

    Label: delay:
        text = 'Delay (ns)'
    QtLineCompleter: delay_val:
        text := task.delay
        tool_tip = fill(cleandoc('''Negative delay are possible'''))
        entries_updater = task.list_accessible_database_entries
    

    Label: average:
        text = 'Average'
    CheckBox: average_val:
        checked := task.average

    Container: repetition:
        Conditional:
            condition << average_val.checked
            Label:
                text = 'Number of repetitions'
            Field:
                text := task.repetition

    Container: trigger:
        GroupBox:
            title = 'Trigger'
            constraints = [grid([chain,trig],[chain_val,trig_val]),
                           chain.width==trig.width,
                           chain.width==trig_val.width,
                           chain_val.width==trig.width
                           ]
            Label : chain:
                text  = 'Demodulator'
            ObjectCombo: chain_val:
                items << list(task.get_member('triggerChain').items)
                tool_tip = fill(cleandoc('''Demodulator used to transfer the trigger. it musst be enable'''))
                selected := task.triggerChain
                
            Label : trig:
                text  = 'Trigger'
            ObjectCombo: trig_val:
                items << list(task.get_member('trigger').items)
                selected := task.trigger

    Container: Control:
        GroupBox:
            title = 'Options'
            constraints = [grid([AWG,Row],[AWG_val,Row_val]),
                           AWG.width==Row.width,
                           AWG.width==Row_val.width,
                           AWG_val.width==Row.width
                           ]
            Label : AWG:
                text  = 'AWG Control'
            CheckBox: AWG_val:
                checked := task.AWGControl
                tool_tip = fill(cleandoc('''Control the trace id thanks to the AWG sequence'''))

                
            Label : Row:
                text  = 'Row repetition'
            CheckBox: Row_val:
                checked := task.RowRepetition
                tool_tip = fill(cleandoc('''Repeat trace instead of repeat grid for the average mode'''))


    Container : SigDict:
        GroupBox:
            title = 'data to record (demodulator, data)'
            DictListEditor(Signal_path): ed:
                ed.mapping := task.signalDict
                ed.operations = ('add', 'move', 'remove')
                ed.attributes = {'task': task}
        