# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2020 by ExopyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""View of the smart save task.

"""
from enaml.layout.api import hbox, align, spacer, vbox, grid
from enaml.widgets.api import (PushButton, Container, Label, Field, FileDialog,
                               GroupBox, ObjectCombo, Dialog, MultilineField,
                               Form, CheckBox)
from inspect import cleandoc
from textwrap import fill

from exopy.tasks.api import (EVALUATER_TOOLTIP, FORMATTER_TOOLTIP,
                            BaseTaskView)
from exopy.utils.widgets.dict_editor import DictEditor
from exopy.utils.widgets.qt_completers import QtLineCompleter, QtTextCompleter


enamldef HeaderDialog(Dialog): dial:
    """Dialog used to edit the header to add to the saved file.

    """
    #: Reference to the task holding the header.
    attr task

    alias header : field.text

    title = 'Header'

    Container:
        constraints = [vbox(field,
                            hbox(spacer, cancel, ok))]

        QtTextCompleter: field:
            hug_height = 'weak'
            entries_updater = task.list_accessible_database_entries
            tool_tip = FORMATTER_TOOLTIP
        PushButton: cancel:
            text = 'Cancel'
            clicked ::
                dial.reject()
        PushButton: ok:
            text = 'Ok'
            clicked ::
                dial.accept()


enamldef SavedValueView(Container):
    """View to edit a key/value pair.

    """
    #: Reference to the key/value pair being edited
    attr model
    constraints = [hbox(k, v), 2*k.width <= v.width]
    padding = 1

    QtLineCompleter: k:
        text := model.key
        entries_updater = model.task.list_accessible_database_entries
        tool_tip = (('The labels are evaluated only once when creating the '
                     'file.') + FORMATTER_TOOLTIP)
    QtLineCompleter: v:
        text := model.value
        entries_updater = model.task.list_accessible_database_entries
        tool_tip = EVALUATER_TOOLTIP


enamldef SmartSaveView(BaseTaskView):
    """View for the SmartSaveTask.

    """
    constraints = [vbox(file_cont, params_ed_box, ed_box)]

    Container: file_cont:

        hug_height = 'strong'
        enabled = True

        GroupBox: folder:

            title = 'Directory'
            constraints = [hbox(path, explore),
                            align('v_center', path, explore)]

            QtLineCompleter: path:
                text := task.folder
                entries_updater << task.list_accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: explore:
                text = 'E'
                hug_width = 'strong'
                clicked ::
                    path = FileDialog(mode = 'directory',
                                    title = 'Select a default path',
                                    ).exec_()
                    if path:
                        task.folder = path

        GroupBox: file:

            title = 'File'
            constraints = [hbox(name, header,
                                grid([dtype_lab],
                                     [dtype_val])),
                            align('v_center', name, header)]

            QtLineCompleter: name:
                text := task.filename
                entries_updater << task.list_accessible_database_entries
                tool_tip = FORMATTER_TOOLTIP
            PushButton: header:
                text = 'Header'
                hug_width = 'strong'
                clicked ::
                    dial = HeaderDialog(header=task.header, task=task)
                    if dial.exec_():
                        task.header = dial.header
            Label: dtype_lab:
                text = 'Data format'
            ObjectCombo: dtype_val:
                items = list(task.get_member('datatype').items)
                selected := task.datatype

    GroupBox: params_ed_box:
        title = "Parameters"

        constraints = [vbox(refresh_button, params_ed)]

        PushButton: refresh_button:
            text = 'Refresh'
            clicked :: task.detect_loops()

        DictEditor(SavedValueView): params_ed:
            params_ed.mapping := task.saved_parameters
            params_ed.mapping :: print("Added parameter", change)
            params_ed.operations = ()
            params_ed.attributes = {'task': task}

    GroupBox: ed_box:
        title = "Data"
        DictEditor(SavedValueView): ed:
            ed.mapping := task.saved_values
            ed.operations = ('add', 'move', 'remove')
            ed.attributes = {'task': task}
